[user]
  name = MikoÅ‚aj Pastuszko
  email = mikolaj.pastuszko@gmail.com
[core]
  excludesfile = /Volumes/Hem/deluminathor/.gitignore_global
  editor = vim
[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 
[mergetool "sourcetree"]
  cmd = /Applications/p4merge.app/Contents/MacOS/p4merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
  trustExitCode = true
[http]
  sslVerify = false
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta
  plain = white bold
  old = red bold
  new = green bold
  commit = yellow bold
  func = green dim
  #plain = white bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[alias]
  # short aliases
  st = status
  sts = status -s
  co = checkout
  ci = commit
  cia = commit -a
  br = branch
  df = diff
  lg = log -p
  rso = remote show origin
  me = config user.name

  up = !git update
  smash = !git ir

  unstage = reset HEAD
  undo-commit = reset --soft HEAD^

  # interactive rebase
  ir = !sh -c 'git rebase -i origin/${1-master}' -

  # log aliases
  log-branch = log origin/master..
  blog = !git log-branch
  mlog = !git log --committer=\"`git me`\"
  lol = log --graph --decorate --pretty=format:\"%C(yellow)%h %Cred%cr %Cblue(%an)%C(white)%d%Creset %s\" --abbrev-commit
  lola = log --graph --decorate --pretty=format:\"%C(yellow)%h %Cred%cr %Cblue(%an)%C(white)%d%Creset %s\" --abbrev-commit --all
  lola80 = log --graph --decorate --pretty=format:\"%C(yellow)%h %Cred%cr %Cblue(%an)%C(white)%d%Creset %s\" --abbrev-commit --all

  # update current branch
  update = !sh -c 'git fetch origin && git rebase -p origin/${1-master}' -

  # creates a diff of current branch against supplied branch, usage: git export-branch [refbranch]
  branch-name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
  export-branch = !git format-patch --stdout $1 > ~/branches/`git branch-name`.diff

  # all commits that aren't merges on all branches
  all = !git log --pretty=oneline --abbrev-commit --all --no-merges

  # all commits today for only me
  today = !git all --since='12am' --committer=\"`git me`\"

  # today's commits without formatting or paging
  today-text = !git --no-pager today --no-color

  # files different from master on current branch
  fdm = !git diff origin/master... --name-status

  # last commit info in svn style
  last = !git show --name-status
  last-files = !git last --pretty=format:""

  # last commit only certain type of modification
  mlast = !git last-files | awk 'match($1, /M/) {print $2}'
  alast = !git last-files | awk 'match($1, /A/) {print $2}'
  dlast = !git last-files | awk 'match($1, /D/) {print $2}'

  # `git done`
  # current branch: merge, push, non-forced delete branch, show info
  done = !sh -c '~/bin/done -d $1' -

  # `git publish`
  # current branch: merge, push, show info
  publish = !sh -c '~/bin/done $1' -

  # `git lint`
  # lints all .php files that are different between current branch and origin/master
  lint = !sh -c '~/bin/lint'

  # `git spawn my-new-branch`
  # make new branch based on master no matter which branch is checked out
  spawn = !sh -c 'git checkout -b $1 ${2-master} && git config branch.$1.localmerge ${2-master}' -

  # `git nuke my-old-branch`
  # (Checks out master and does a non-forced delete on the branch entered)
  nuke = !git co master && sh -c 'git br -d $1' -

  # `git sync`
  # update current branch and master
  sync = !git update && \
    git co master && \
    git pull && \
    git co @{-1}

  # `git save`
  # saves a commit in current branch: local branches you will be rebasing
  save = !git commit -am \"save game\"

  # cleanup repo
  cleanup = !git remote prune origin && git gc && git clean -dfx

  # list files changed by last commit in absolute location
  list = !git show --pretty=format:"" --name-only | sed '/^$/d' | sed 's|^|/var/www/|g'

  # give a count of dirty files
  dirty = !git status --porcelain -uno | wc -l

  # number of non-merge commits
  peeps = !git log --pretty=format:%aN --no-merges | sort | uniq -c | sort -rn

  # awesome placeholders
  crunk = status
  unfuck = status
  deploy = status

  # serve
  serve = !git daemon --reuseaddr --verbose --base-path=. --export-all ./.git

[github]
  user = mPastuszko
  password = !security 2>&1 >/dev/null find-generic-password -gs github.password | ruby -e 'print $1 if STDIN.gets =~ /^password: \\\"(.*)\\\"$/'
[merge]
  tool = p4merge
[mergetool]
  prompt = false
  keepBackup = false
[mergetool "p4merge"]
  path = /usr/local/bin/p4merge
